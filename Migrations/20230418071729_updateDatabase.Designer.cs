// <auto-generated />
using System;
using CameraBase.Entity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CameraBase.Migrations
{
    [DbContext(typeof(CameraBasedContext))]
    [Migration("20230418071729_updateDatabase")]
    partial class updateDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CameraBase.Entity.Account", b =>
                {
                    b.Property<int>("AccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountID"));

                    b.Property<string>("AccounName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AccountEmail")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<DateTime>("TokenCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AccountID");

                    b.HasIndex("RoleID");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            AccountID = 1,
                            AccounName = "admin",
                            AccountEmail = "Admin@gmail.com",
                            FullName = "ADMIN",
                            RoleID = 1,
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            password = "123"
                        });
                });

            modelBuilder.Entity("CameraBase.Entity.CarManagement", b =>
                {
                    b.Property<int>("CarManagementID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarManagementID"));

                    b.Property<string>("CarBrand")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CarColor")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CarName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LicensePlates")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("CarManagementID");

                    b.ToTable("carManagements");
                });

            modelBuilder.Entity("CameraBase.Entity.Carlocator", b =>
                {
                    b.Property<int>("CarLocatorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarLocatorID"));

                    b.Property<int>("CarManagementID")
                        .HasColumnType("int");

                    b.Property<string>("location")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CarLocatorID");

                    b.HasIndex("CarManagementID");

                    b.ToTable("Carlocators");
                });

            modelBuilder.Entity("CameraBase.Entity.NotifiHistory", b =>
                {
                    b.Property<int>("HistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HistoryID"));

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<int>("CarManagementID")
                        .HasColumnType("int");

                    b.Property<DateTime>("HistoryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HistoryName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("HistoryStatus")
                        .HasColumnType("bit");

                    b.HasKey("HistoryID");

                    b.HasIndex("AccountID");

                    b.HasIndex("CarManagementID");

                    b.ToTable("NotifiHistories");
                });

            modelBuilder.Entity("CameraBase.Entity.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleID"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("RoleID");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleID = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleID = 2,
                            RoleName = "Customer"
                        },
                        new
                        {
                            RoleID = 3,
                            RoleName = "Owner"
                        });
                });

            modelBuilder.Entity("CameraBase.Entity.SubAccount", b =>
                {
                    b.Property<int>("SubAccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubAccountID"));

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<string>("SubAccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubAccountPhone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubAccountID");

                    b.HasIndex("AccountID");

                    b.ToTable("SubAccounts");
                });

            modelBuilder.Entity("CameraBase.Entity.Account", b =>
                {
                    b.HasOne("CameraBase.Entity.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CameraBase.Entity.Carlocator", b =>
                {
                    b.HasOne("CameraBase.Entity.CarManagement", "CarManagement")
                        .WithMany("Carlocators")
                        .HasForeignKey("CarManagementID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarManagement");
                });

            modelBuilder.Entity("CameraBase.Entity.NotifiHistory", b =>
                {
                    b.HasOne("CameraBase.Entity.Account", "Account")
                        .WithMany("NotifiHistories")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CameraBase.Entity.CarManagement", "CarManagement")
                        .WithMany("NotifiHistories")
                        .HasForeignKey("CarManagementID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("CarManagement");
                });

            modelBuilder.Entity("CameraBase.Entity.SubAccount", b =>
                {
                    b.HasOne("CameraBase.Entity.Account", "Account")
                        .WithMany("SubAccounts")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CameraBase.Entity.Account", b =>
                {
                    b.Navigation("NotifiHistories");

                    b.Navigation("SubAccounts");
                });

            modelBuilder.Entity("CameraBase.Entity.CarManagement", b =>
                {
                    b.Navigation("Carlocators");

                    b.Navigation("NotifiHistories");
                });

            modelBuilder.Entity("CameraBase.Entity.Role", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
